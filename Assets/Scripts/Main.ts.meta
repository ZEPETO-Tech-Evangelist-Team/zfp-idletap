fileFormatVersion: 2
guid: b86714331baa15243a49032e33da552f
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nexports.ENEMY_START_HEALTH = void 0;\r\nconst UnityEngine_1
    = require(\"UnityEngine\");\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst
    UIManager_1 = require(\"./UIManager\");\r\nconst Enemy_1 = require(\"./Enemy\");\r\nexports.ENEMY_START_HEALTH
    = 15;\r\nclass Main extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    Awake()
    {\r\n        Main._main = this;\r\n    }\r\n    Start() {\r\n        //initialize
    _currentPlayers Map\r\n        this._currentPlayers = new Map();\r\n        //cache
    reference to UIManager;\r\n        this._uIManager = this.UIManagerGO.GetComponent($typeof(UIManager_1.default));\r\n       
    //cache reference to Enemy\r\n        this._enemy = this.EnemyGO.GetComponent($typeof(Enemy_1.default));\r\n       
    //register callback method for ZepetoWorldMultiplay.RoomJoined\r\n        this.MultiplayReference.add_RoomJoined((room)
    => {\r\n            //cache reference to Room\r\n            this._roomReference
    = room;\r\n            //register callback method for Room.OnStateChange\r\n           
    this._roomReference.add_OnStateChange(this._onStateChange.bind(this));\r\n       
    });\r\n    }\r\n    //Static functon to access Main\r\n    static GetInstance()
    {\r\n        return this._main;\r\n    }\r\n    AttackEnemy() {\r\n        let
    damageAmount = 1;\r\n        this._roomReference.Send(\"CLIENT_ATTACK_MESSAGE\",
    damageAmount);\r\n    }\r\n    _updatePlayers() {\r\n        this._uIManager.UpdatePlayers(this._currentPlayers);\r\n   
    }\r\n    _updateEnemy() {\r\n        this._enemy.UpdateEnemy(this._roomReference.State.schemaEnemy.health);\r\n   
    }\r\n    //Function registered to Room.OnStateChange\r\n    _onStateChange(state,
    isFirst) {\r\n        if (isFirst) {\r\n            //Register _updateEnemy()
    callback function when the schemaEnemy changes\r\n            state.schemaEnemy.add_OnChange(this._updateEnemy.bind(this));\r\n           
    this._updateEnemy();\r\n        }\r\n        this._updatePlayersMap(state);\r\n       
    this._updatePlayers();\r\n    }\r\n    //This function is responsible for keeping
    _currentPlayers map up to date with the players still in the Room\r\n    _updatePlayersMap(state)
    {\r\n        const join = new Map();\r\n        const leave = new Map(this._currentPlayers);\r\n       
    state.schemaPlayers.ForEach((userId, player) => {\r\n            if (!this._currentPlayers.has(userId))
    {\r\n                this._currentPlayers.set(userId, player);\r\n               
    join.set(userId, player);\r\n            }\r\n            leave.delete(userId);\r\n       
    });\r\n        // [RoomState] Create a player instance for players that enter
    the Room\r\n        join.forEach((schemaPlayer, userId) => this._onJoinPlayer(userId,
    schemaPlayer));\r\n        // [RoomState] Remove the player instance for players
    that exit the room\r\n        leave.forEach((schemaPlayer, userId) => this._onLeavePlayer(userId,
    schemaPlayer));\r\n    }\r\n    //Add player UI when player joins\r\n    _onJoinPlayer(userId,
    schemaPlayer) {\r\n        this._uIManager.AddUserInfoPanel(userId);\r\n    }\r\n   
    //Remove player UI when player leaves\r\n    _onLeavePlayer(userId, schemaPlayer)
    {\r\n        this._currentPlayers.delete(userId);\r\n        this._uIManager.RemoveUserInfoPanel(userId);\r\n   
    }\r\n}\r\nexports.default = Main;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQWtEO0FBR2xELGlEQUFxRDtBQUVyRCwyQ0FBb0M7QUFDcEMsbUNBQTRCO0FBRWYsUUFBQSxrQkFBa0IsR0FBRyxFQUFFLENBQUM7QUFFckMsTUFBcUIsSUFBSyxTQUFRLHFDQUFxQjtJQWNuRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQztJQUVELEtBQUs7UUFDRCxnQ0FBZ0M7UUFDaEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLEdBQUcsRUFBd0IsQ0FBQztRQUV2RCwrQkFBK0I7UUFDL0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksU0FBQyxtQkFBUyxFQUFHLENBQUM7UUFFN0QsMEJBQTBCO1FBQzFCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLFNBQUMsZUFBSyxFQUFHLENBQUM7UUFFakQsOERBQThEO1FBQzlELElBQUksQ0FBQyxrQkFBa0IsZ0JBQWUsQ0FBQyxJQUFVLEVBQUUsRUFBRTtZQUVqRCx5QkFBeUI7WUFDekIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7WUFFM0IsaURBQWlEO1lBQ2pELElBQUksQ0FBQyxjQUFjLG1CQUFrQixJQUFJLENBQUMsY0FBYyxhQUFDO1FBQzdELENBQUMsRUFBQztJQUNOLENBQUM7SUFFRCwrQkFBK0I7SUFDeEIsTUFBTSxDQUFDLFdBQVc7UUFDckIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFTSxXQUFXO1FBQ2QsSUFBSSxZQUFZLEdBQVcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFTyxjQUFjO1FBQ2xCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRU8sWUFBWTtRQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELDJDQUEyQztJQUNuQyxjQUFjLENBQUMsS0FBWSxFQUFFLE9BQWdCO1FBQ2pELElBQUksT0FBTyxFQUFFO1lBQ1Qsd0VBQXdFO1lBQ3hFLEtBQUssQ0FBQyxXQUFXLGNBQWEsSUFBSSxDQUFDLFlBQVksYUFBQztZQUNoRCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDdkI7UUFFRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCw0R0FBNEc7SUFDcEcsaUJBQWlCLENBQUMsS0FBYTtRQUNuQyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBd0IsQ0FBQztRQUM3QyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBdUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRWxFLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBYyxFQUFFLE1BQW9CLEVBQUUsRUFBRTtZQUNqRSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ25DLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDekMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDNUI7WUFDRCxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBRUgsdUVBQXVFO1FBQ3ZFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUEwQixFQUFFLE1BQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUV2Ryx3RUFBd0U7UUFDeEUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQTBCLEVBQUUsTUFBYyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQzdHLENBQUM7SUFFRCxpQ0FBaUM7SUFDekIsYUFBYSxDQUFDLE1BQWUsRUFBRSxZQUEyQjtRQUM5RCxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxxQ0FBcUM7SUFDN0IsY0FBYyxDQUFDLE1BQWUsRUFBRSxZQUEyQjtRQUMvRCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELENBQUM7Q0FDSjtBQXBHRCx1QkFvR0MifQ==","assetPath":"Assets/Scripts/Main.ts","manifest":{"properties":[{"assembly":"UnityEngine.CoreModule","name":"UIManagerGO","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"EnemyGO","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"ZEPETO.World","name":"MultiplayReference","type":"ZEPETO.World.ZepetoWorldMultiplay","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"Main","description":"","hasAnimatorMove":false},"isCompiled":true}'
  typescriptHash: 5be0790082606f81e6842603895948ff
  onlyWriteTrigger: 0
